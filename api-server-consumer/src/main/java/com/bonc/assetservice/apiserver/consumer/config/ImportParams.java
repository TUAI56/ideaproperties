package com.bonc.assetservice.apiserver.consumer.config;


import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

/**
 * RocketMq配置信息
 *
 * @Author 李维帅
 * @Date 2022/7/6 10:41
 **/
@Data
@Configuration
@ConfigurationProperties(prefix = "importparams")
public class ImportParams {

    ////////////////////////////////////////////////////////////////////////
            // java命令路径
// 注:如果在控制台下可直接执行java命令，则无需设置
////////////////////////////////////////////////////////////////////////
    private String jar_path;
    ////////////////////////////////////////////////////////////////////////
// 配置数据库连接参数
// 注:确保database已经在ADB中创建
//    如果encryptPassword=true需要填写base64加密后的密码
////////////////////////////////////////////////////////////////////////
    private String host;
    private String port;
    private String user;
    private String password;
    private String database;
    private String encryptPassword;

    ////////////////////////////////////////////////////////////////////////
// 导入表名
////////////////////////////////////////////////////////////////////////
    private String tableName;

    ////////////////////////////////////////////////////////////////////////
// 1）导入的文件夹绝对路径
// 或者
// 2）单个文件绝对路径
// 或者
// 3）多个文件路径逗号分隔
////////////////////////////////////////////////////////////////////////
    private String dataPath;

    ////////////////////////////////////////////////////////////////////////
// 导入并行度
// 注:越大的并行度有利于发挥ADB的性能
//    建议值>=16，<=96
////////////////////////////////////////////////////////////////////////
    private String concurrency;

    ////////////////////////////////////////////////////////////////////////
// 导入攒批数
// 注:越大的批次有利于发挥ADB的性能
//    但也要结合单行的长度，不宜过大
//    建议值>=1024，<=4096
////////////////////////////////////////////////////////////////////////
    private String batchSize;

    ////////////////////////////////////////////////////////////////////////
// 导入文件编码，UTF-8或者GBK
////////////////////////////////////////////////////////////////////////
    private String encoding;

    ////////////////////////////////////////////////////////////////////////
// 行分隔符
// 例如"\\n"表示换行，
// 十六进制\x0d\x06\x08\x0a用"hex0d06080a"表示
////////////////////////////////////////////////////////////////////////
    private String lineSeparator;

    ////////////////////////////////////////////////////////////////////////
// 列分隔符
// 例如"\\|"，
// 十六进制\x07\x07用"hex0707"表示
////////////////////////////////////////////////////////////////////////
    private String delimiter;

// -------------------------------- //
//           下面是选填参数
// -------------------------------- //

////////////////////////////////////////////////////////////////////////
// jvm参数
////////////////////////////////////////////////////////////////////////
//private String    jvmopts="-Xmx12G -Xms12G"

    ////////////////////////////////////////////////////////////////////////
// 当dataFile是一个目录的时候，
// 一批最多并行导入多少文件，分N批执行
////////////////////////////////////////////////////////////////////////
    private String maxConcurrentNumOfFilesToImport;

    ////////////////////////////////////////////////////////////////////////
// 如果true，则空字符串会变成''；
// 否则填null，推荐用false，填null
// 选填，默认false。
////////////////////////////////////////////////////////////////////////
    private String nullAsQuotes;

    ////////////////////////////////////////////////////////////////////////
// 每个文件导入完毕后是否打印目标表实际行数。
// 选填，默认false。
////////////////////////////////////////////////////////////////////////
    private String printRowCount;

    ////////////////////////////////////////////////////////////////////////
// sql失败时候会打印sql，这里是截断的长度，
// 避免日志太长。
// 选填，默认1000。
////////////////////////////////////////////////////////////////////////
    private String failureSqlPrintLengthLimit;

    ////////////////////////////////////////////////////////////////////////
// 不真正执行insert，仅仅打印sql。
// 选填，默认false
////////////////////////////////////////////////////////////////////////
    private String disableInsertOnlyPrintSql;

    ////////////////////////////////////////////////////////////////////////
// 跳过表头。选填，默认false
////////////////////////////////////////////////////////////////////////
    private String skipHeader;

    ////////////////////////////////////////////////////////////////////////
// 从文件读出的行攒批batchSize拼成insert
// sql，这个sql的缓存数量，便于发送给ADB的时候做到
// io和计算分离，就像滑动窗口，提高客户端性能
////////////////////////////////////////////////////////////////////////
    private String windowSize;

    ////////////////////////////////////////////////////////////////////////
// 是否转义列中的\以及'符号。选填，默认true，表示需要转义.
// 转义对于客户端有一定字符串解析的性能损失，
// 特殊情况下保证没有转义字符的情况下，可以置false。
////////////////////////////////////////////////////////////////////////
    private String escapeSlashAndSingleQuote;

    ////////////////////////////////////////////////////////////////////////
// 导入数据遇到错误，是否忽略失败的批次
////////////////////////////////////////////////////////////////////////
    private String ignoreErrors;

    ////////////////////////////////////////////////////////////////////////
// 导入数据遇到错误，是否打印出错的sql
////////////////////////////////////////////////////////////////////////
    private String printErrorSql;

    ////////////////////////////////////////////////////////////////////////
// 导入数据遇到错误，printErrorSql=true时，
// 是否打印出错的栈信息
////////////////////////////////////////////////////////////////////////
    private String printErrorStackTrace;

    private String insertWithColumnNames;


}
